.TH "el_print" "3" "22 sep 2017 (v1.0.0)" "bofc.pl"
.SH NAME
.PP
.BR el_print ,
.BR el_vprint ,
.BR el_puts ,
.B el_perror
- prints message to previously configured outputs.
.SH SYNOPSIS
.PP
.B "#include <embedlog.h>"
.PP
.BI "int el_puts(const char *" message ")"
.br
.BI "int el_print(const char *" file ", size_t " line ", \
enum el_level " level ", const char *" fmt ", " ... ")"
.br
.BI "int el_vprint(const char *" file ", size_t " line ", \
enum el_level " level ", const char *" fmt ", va_list " ap ")"
.br
.BI "int el_perror(const char *" file ", size_t " line ", \
enum el_level " level ", const char *" fmt ", " ... ")"
.br
.BI "int el_pmemory(const char *" file ", size_t " line ", \
enum el_level " level ", const void *" memory ", size_t " mlen ")
.PP
.BI "int el_oputs(struct el_options *" options ", const char *" message ")"
.br
.BI "int el_oprint(const char *" file ", size_t " line ", \
enum el_level " level ", struct el_options *" options ", \
const char *" fmt ", " ... ")"
.br
.BI "int el_ovprint(const char *" file ", size_t " line ", \
enum el_level " level ", struct el_options *" options ", \
const char *" fmt ", va_list " ap ")"
.br
.BI "int el_operror(const char *" file ", size_t " line ", \
enum el_level " level ", struct el_options *" options ", \
const char *" fmt ", " ... ")"
.br
.BI "int el_pmemory(const char *" file ", size_t " line ", \
enum el_level " level ", struct el_options *" options ", \
const void *" memory ", size_t " mlen ")"
.PP
.BI "#define ELF " __FILE__ ", " __LINE__ ", " EL_FATAL
.br
.BI "#define ELA " __FILE__ ", " __LINE__ ", " EL_ALERT
.br
.BI "#define ELC " __FILE__ ", " __LINE__ ", " EL_CRIT
.br
.BI "#define ELE " __FILE__ ", " __LINE__ ", " EL_ERROR
.br
.BI "#define ELW " __FILE__ ", " __LINE__ ", " EL_WARN
.br
.BI "#define ELN " __FILE__ ", " __LINE__ ", " EL_NOTICE
.br
.BI "#define ELI " __FILE__ ", " __LINE__ ", " EL_INFO
.br
.BI "#define ELD " __FILE__ ", " __LINE__ ", " EL_DBG
.PP
.BI "#define EL_DEBUG(" ... ") el_print(ELD, __VA_ARGS__)
.PP
Feature Test Macro
.PP
.BR "#define EL_DEBUG" ()
.RS
__ISOC99_SOURCE
.RE
.SH DESCRIPTION
.PP
Functions print log into configured outputs.

.BR el_puts (3)
function prints
.I message
that is simple string,
.I message
is not altered in anyway - that means no automatic log levels, location of the
log nor timestamp is printed - even if they are enabled.
Logs printed with this functions are not filtered by log level, and will always
be printed. Prints can still be suppressed by disabling output.
.PP
.BR el_print (3)
function behaves similar to standard
.BR printf ()
function from the standard library, but it adds (if enabled) additional
information, such as
.I file
and
.I line
number from where log is printed, log
.IR level ,
and timestamp of the message.
.I fmt
and variadic variables
.I ...
have the same role as it is described in
.BR printf ()
manual page.
.PP
.BR el_vprint (3)
function behaves just like
.BR el_print (3)
but it accepts argument pointer
.I ap
instead of variadic variables.
Check
.BR vprintf ()
for more information.
.PP
.BR el_perror (3)
works the same way as
.BR el_print (3)
but will also print information about current errno that was set.
If
.I fmt
is
.BR NULL ,
only information about errno will be printed.
It is similar to
.BR perror ()
function.
.PP
.BR el_pmemory (3)
is designed to print memory location in a nice hex+ascii format that may look
like this.
In this example we print all ascii table, to present printing of printable and
non-printable values.
.PP
.EX
    ------  -----------------------------------------------  ----------------
    offset  hex                                              ascii
    ------  -----------------------------------------------  ----------------
    0x0000  00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  ................
    0x0010  10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f  ................
    0x0020  20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f   !"#$%&'()*+,-./
    0x0030  30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f  0123456789:;<=>?
    0x0040  40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f  @ABCDEFGHIJKLMNO
    0x0050  50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f  PQRSTUVWXYZ[\]^_
    0x0060  60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f  `abcdefghijklmno
    0x0070  70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f  pqrstuvwxyz{|}~.
    ------  -----------------------------------------------  ----------------
.EE
.PP
.BR el_print (3),
.BR el_vprint (3),
.BR el_perror (3)
and
.BR el_pmemory (3)
are filtered based on their
.IR level .
.PP
All of above functions have their counterpart that also accepts custom
.I options
object.
This is useful if we want for example, print logs into one file, and program
queries into another.
It can also be used to print every level into different file.
.PP
It is real pain in the ass to provide information about file in every print
function. For that matter very simple macros have been provided.
.PP
.RS
.BR ELF "    Fatal errors, usually precedes application crash"
.br
.BR ELA "    Alert, vey major error that should be fixed as soon as possible"
.br
.BR ELC "    Critical"
.br
.BR ELE "    Error"
.br
.BR ELW "    Warning"
.br
.BR ELN "    Normal log, but of high importance"
.br
.BR ELI "    Information message, shouldn't spam too much here"
.br
.BR ELD "    Debug messages, can spam as much as you'd like"
.RE
.PP
These macros comprese first 3 parameters
.IR file ,
.I line
and
.I level
into single, short parameter.
For example instead calling this
.PP
.EX
    el_print(__FILE__, __LINE__, EL_NOTICE, "notice message number %d", num);
.EE
.PP
you can simply call
.PP
.EX
    el_print(ELN, "notice message number %d", num);
.EE
.PP
This solution works both for
.B c89
and
.B c99
standards.
All side effects (like from calling function or incrementing variable in print
function call) will take effect always regardless of set logging level.
Also strings used in functions will be compiled and put into binary - always.
.PP
If user has access to
.B c99
compiler, one can use
.B EL_DEBUG
for debuging messages only.
Later when application is compiled with NDEBUG, all side effects as well as
strings used will be stripped out from final binary - so no vital information
will be leaked in such way.
This is not possible on
.B c89
compiller due to absence of variadic variables in
preprocesor macros.
.SH RETURN VALUE
.PP
All functions return 0 when whole message has been successfuly printed to all
configured outputs.
If message couldn't be printed, it was printed only partially, or was not send
to at least one configured output -1 is returned.
Note that only one error is returned even if there was multiple errors.
.SH ERRORS
.PP
All functions may return one of these on error
.TP
.B EINVAL
Any of the input parameters is invalid.
.TP
.B EBADF
Loggig to file is enabled and filename was not set with
.B EL_FNAME
option
.TP
.B EBADF
Logging to file is enabled, file was opened sucessfuly, but log cannot be stored
into file.
This usually happen that file was unlinked from the file system and
.B embedlog
couldn't create new file again (no access to directory or directory doesn't
exist at all).
Log is lost, but
.B embedlog
will try to recreate log file everytime
.BR el_print (3)
is called.
.TP
.B ENODEV
All possible outputs are disabled
.PP
.BR el_print (3),
.BR el_vprint (3),
.BR el_perror (3)
and
.BR el_pmemory (3)
may also return:
.TP
.B ERANGE
Message will not be logged as message log level is lower than configured one.
.TP
.B ENOBUFS
Message is bigger than
.B EL_LOG_MAX
and will be truncated.
.PP
When logging to file is enabled, all functions may also return errors
from
.BR fwrite ()
and if file rotation is enabled also from
.BR fopen ()
.SH SEE ALSO
.PP
.BR el_init (3),
.BR el_cleanup (3),
.BR el_overview (7),
.BR el_option (3),
.BR el_pmemory (3),
.BR el_ocleanup (3),
.BR el_ooption (3),
.BR el_opmemory (3),
